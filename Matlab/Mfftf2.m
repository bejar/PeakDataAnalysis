function [X, f, y, y2] = Mfftf2(t, x, varargin)
% fftf - fft filter;
%   [X, f, y, y2] = fftf(t, x); with t the time vector and x the signal,
%   displays the original signal, the Fourier transform (absolute values)
%   and the reconstructed signal generated by the inverse transform ifft
%   with a selected subset of the frequencies.
%   By default, the frequencies in the filtered signal are cut at 1/8 the
%   sampling frequency.
%   The function returns X - reconstructed signal, f - vector of frequencies, y -
%   full vector of amplitudes, y2 - the filtered vector of amplitudes.
%   [X, f, y, y2] = fftf(t, x, cutoff); the user may set the cutoff
%   frequency in units of Hertz.
%   [X, f, y, y2] = fftf(t, x, cutoff, my_N); the user may select my_N
%   amplitudes with highest abolute value to participate in the
%   reconstruction.

% Verifying input
if ~any(size(t)==1),
   disp('Unexpected vector size! - should be 1D vectors.')
   return
end
if ~any(size(x)==1),
   disp('Unexpected vector size! - should be 1D vectors.')
   return
end
if length(t)~=length(x),
   disp('Unexpected vector size! - should be same length.')
   return
end


% Definitions
Fs=1/(t(2)-t(1)); %sampling freq
N=length(x);
Nfft=2^nextpow2(N);
f=Fs/2*linspace(0,1,1+Nfft/2); % create freqs vector

cutoff1=0;
cutoff2=Fs/8;
ifig=0;

if nargin>2,
    cutoff1=varargin{1};
    cutoff2=varargin{2};
end


tap=0.;
if nargin>3,
tap=varargin{3};
end

my_freqs=[];
if nargin>4,
    my_freqs=varargin{4};
end

if nargin>5,
    ifig=varargin{5};
end


Df=1; Dt=1e3; Dx=1e3; FFS=Fs/8;
ymin=min(x*Dx); ymax=max(x*Dx);
xmin=min(t*Dt); xmax=max(t*Dt);

if(tap)
H=sigwin.tukeywin(length(x),tap);
win=generate(H)';
x=x.*win;
end

% main
y=fft(x,Nfft)/N; % perform fft transform
y2=filterfft(f, y, cutoff1, cutoff2, my_freqs); % filter amplitudes

%X=ifft(y2,'symmetric'); % the inverse transform. 'symmetric' is not recognized in older versions of matlab
X=real(ifft(y2)); % inverse transform
X=X(1:N)*N;
ymin1=min(X*Dx); ymax1=max(X*Dx);
ymin=1.2*min(ymin,ymin1);
ymax=1.2*max(ymax,ymax1);

ind1 = find(y2(1:1+Nfft/2)); % get the nonzero elements in y2
nf1 = length(ind1); % count nonzero elements

% display
if ifig

figure(ifig)

subplot(2,1,1)
plot(t*Dt,x*Dx)
hold on;plot(t*Dt,X*Dx,'r'); hold off

if isempty(cutoff2),
    scutoff1='No cutoffH';
else
    scutoff2=sprintf('CutoffH = %g [Hz]', cutoff2);
end
if isempty(cutoff1),
    scutoff1='No cutoffL';
else
    scutoff1=sprintf('CutoffL = %g [Hz]', cutoff1);
end
stitle3=sprintf('Reconstructed signal with %d selected frequencies; %s,%s', nf1, scutoff1,scutoff2);
title(stitle3)

xlabel('mSec')
ylabel('mVolt')
axis([xmin xmax ymin ymax]);
%axis tight
title('Original and reconstructed signals')


%second plot
subplot(2,1,2)
yplot=abs(y(1:1+Nfft/2));
yplot=yplot/max(yplot);
semilogy(f*Df, yplot, f(ind1)*Df, yplot(ind1), '.r');
axis([0 FFS 10^(-5) 10^0]);
xlabel('Hz')
ylabel('Amp')
title('Amplitudes')
legend('full spectrum', 'selected frequencies')

end
return
end